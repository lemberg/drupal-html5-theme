//Adds ellipsis for long texts
@mixin ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

//Setting color of form item's placeholder
@mixin form-item-placeholder($color: $color-primary) {
  &::-webkit-input-placeholder {
    color: $color;
    -webkit-transition: color 0.5s;
    transition: color 0.5s;
  }
  &:-moz-placeholder {
    color: $color;
    transition: color 0.5s;
    opacity: 1;
  }
  &::-moz-placeholder {
    color: $color;
    transition: color 0.5s;
    opacity: 1;
  }
  &:-ms-input-placeholder {
    color: $color;
    transition: color 0.5s;
  }
  &:focus {
    &::-webkit-input-placeholder {
      color: transparent;
    }
    &:-moz-placeholder {
      color: transparent;
    }
    &::-moz-placeholder {
      color: transparent;
    }
    &:-ms-input-placeholder {
      color: transparent;
    }
  }
}

//Importing custom fonts
@mixin font-face($font-name){
  @font-face {
    font-family: '#{$font-name}';
    src: url('../fonts/#{$font-name}.eot');
    src: url('../fonts/#{$font-name}.eot?#iefix') format('embedded-opentype'),
    url('../fonts/#{$font-name}.woff') format('woff'),
    url('../fonts/#{$font-name}.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
  }
}

/*Flex Box mixins*/
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}
@mixin flex-direction($value) {
  @if $value == 'row' {
    -moz-box-orient: horizontal;
    -webkit-box-orient: horizontal;
    box-orient: horizontal;
  }
  @if $value == 'column' {
    -moz-box-orient: vertical;
    -webkit-box-orient: vertical;
    box-orient: vertical;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  flex-direction: $value;
}
@mixin flex-order($value) {
  -webkit-box-ordinal-group: $value;
  -moz-box-ordinal-group: $value;
  -ms-flex-order: $value;
  -webkit-order: $value;
  order: $value;
}

//Adds triangle arrow using border properties
@mixin border-arrow($direction, $width, $height, $color) {
  width: 0;
  height: 0;
  @if $direction == 'top' or $direction == 'bottom' {
    border-left: #{round($width/2)}px solid transparent;
    border-right: #{round($width/2)}px solid transparent;
    @if $direction == 'top' {
      border-bottom: #{$height}px solid $color;
    } @else {
      border-top: #{$height}px solid $color;
    }
  } @else {
    border-top: #{round($height/2)}px solid transparent;
    border-bottom: #{round($height/2)}px solid transparent;
    @if $direction == 'left' {
      border-right: #{$width}px solid $color;
    } @else {
      border-left: #{$width}px solid $color;
    }
  }
}

//Hamburger menu icon
@mixin hamburger-icon($width, $height, $thickness: 4px, $color: $color-primary) {
  display: inline-block;
  vertical-align: top;
  box-sizing: border-box;
  width: $width;
  height: $height;
  position: relative;
  border-top: $thickness solid $color;
  border-bottom: $thickness solid $color;
  border-left: 0;
  border-right: 0;
  outline: 0;
  &:after {
    content: '';
    position: absolute;
    width: 100%;
    height: $thickness;
    background: $color;
    top: 50%;
    left: 0;
    margin-top: -($thickness * 0.5);
  }
}

//Transition mixin
@mixin transition($property: all, $duration: $animation-duration, $delay: 0, $timing: ease) {
  -webkit-transition: #{$property} #{$duration};
  transition: #{$property} #{$duration};
  -webkit-transition-delay: #{$delay};
  transition-delay: #{$delay};
  -webkit-transition-timing-function: $timing;
  transition-timing-function: $timing;
}

@mixin grid-width($value) {
  box-sizing: border-box;
  width: #{$value * 100 / $columns}#{'%'};
}
@mixin offset-left($value) {
  margin-left: #{$value * 100 / $columns}#{'%'};
}
@mixin offset-right($value) {
  margin-right: #{$value * 100 / $columns}#{'%'};
}

@mixin clearfix {
  &:before,
  &:after {
    display: table;
    line-height: 0;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Gradients
@mixin gradient-horizontal($startColor, $endColor) {
  background-color: $endColor;
  background-image: -moz-linear-gradient(left, $startColor, $endColor);
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor));
  background-image: -webkit-linear-gradient(left, $startColor, $endColor);
  background-image: -o-linear-gradient(left, $startColor, $endColor);
  background-image: linear-gradient(to right, $startColor, $endColor);
  background-repeat: repeat-x;
}

@mixin gradient-vertical($startColor, $endColor) {
  background-image: -moz-linear-gradient(top, $startColor, $endColor);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor));
  background-image: -webkit-linear-gradient(top, $startColor, $endColor);
  background-image: -o-linear-gradient(top, $startColor, $endColor);
  background-image: linear-gradient(to bottom, $startColor, $endColor);
  background-repeat: repeat-x;
}
@mixin gradient-directional($startColor, $endColor, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient($deg, $startColor, $endColor);
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor);
  background-image: -o-linear-gradient($deg, $startColor, $endColor);
  background-image: linear-gradient($deg, $startColor, $endColor);
}
@mixin gradient-radial($innerColor, $outerColor)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color, $angle: 45deg) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}

// Transformations
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -moz-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
  -moz-transform: scale($ratio);
  -ms-transform: scale($ratio);
  -o-transform: scale($ratio);
  transform: scale($ratio);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
  -moz-transform: skew($x, $y);
  -ms-transform: skew($x, $y);
  -o-transform: skew($x, $y);
  transform: skew($x, $y);
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
@mixin backface-visibility($visibility){
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  backface-visibility: $visibility;
}

@mixin breakpoint($value) {
  @media (max-width: $value) {
    @content;
  }
}